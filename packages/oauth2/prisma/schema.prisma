// ----------------------------------------
// Prisma Client Generator
// ----------------------------------------
generator client {
  provider      = "prisma-client-js"
  output        = "../dist/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "darwin-arm64"]
}

// ----------------------------------------
// Datasource
// ----------------------------------------
datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

// ----------------------------------------
// OAuth Models
// ----------------------------------------

/// This model defines the available scopes for OAuth clients.
model OAuthScope {
  oauthScopeId Int     @id @default(autoincrement()) @map("oauth_scope_id")
  scope        String  @unique @db.VarChar(80)
  isDefault    Boolean @map("is_default")

  @@map("oauth_scopes")
}

/// This model represents an OAuth2 client application.
model OAuthClient {
  oauthClientId Int      @id @default(autoincrement()) @map("oauth_client_id")
  name          String   @unique @db.VarChar(255)
  clientId      String   @unique @map("client_id") @db.VarChar(80)
  clientSecret  String   @map("client_secret") @db.VarChar(80)
  redirectUris  String[] @map("redirect_uris") // Using String array for better handling of multiple URIs.
  grantTypes    String[] @map("grant_types") @db.VarChar(80) // Using String array for multiple grant types.
  scope         String   @db.VarChar(80)

  // Relations
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]

  @@map("oauth_clients")
}

/// This model stores authentication-specific user data.
model OAuthUser {
  userId     String   @id @map("user_id") @db.VarChar(50)
  password   String   @db.VarChar(500)
  salt       String?  @db.VarChar(500)
  iterations Int?
  scope      String   @db.VarChar(80)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]
  user          User? // Establishes a 1-to-1 relationship with the User model.

  @@map("oauth_users")
}

/// This model stores refresh tokens.
model OAuthRefreshToken {
  oauthRefreshTokenId Int       @id @default(autoincrement()) @map("oauth_refresh_token_id")
  refreshToken        String    @unique @map("refresh_token") @db.VarChar(100)
  expires             DateTime? @db.Timestamptz(6)
  scope               String    @db.VarChar(80)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  oauthClientId       Int?      @map("oauth_client_id")
  userId              String?   @map("user_id")

  // Relations
  oauthClient OAuthClient? @relation(fields: [oauthClientId], references: [oauthClientId])
  user        OAuthUser?   @relation(fields: [userId], references: [userId])

  @@map("oauth_refresh_tokens")
}

/// This model stores access tokens.
model OAuthAccessToken {
  oauthAccessTokenId Int       @id @default(autoincrement()) @map("oauth_access_token_id")
  accessToken        String    @unique @map("access_token") @db.VarChar(255)
  expires            DateTime? @map("expires") @db.Timestamptz(6)
  scope              String    @map("scope") @db.VarChar(80)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  oauthClientId      Int?      @map("oauth_client_id")
  userId             String?   @map("user_id") @db.VarChar(50)

  // Relations
  oauthClient OAuthClient? @relation(fields: [oauthClientId], references: [oauthClientId])
  user        OAuthUser?   @relation(fields: [userId], references: [userId])

  @@map("oauth_access_tokens")
}

// ----------------------------------------
// User Profile Model
// ----------------------------------------

/// This model stores core user profile information.
model User {
  userId     String   @id @map("user_id") @db.VarChar(50)
  email      String   @db.VarChar(100)
  name       String?  @db.VarChar(100)
  deleteFlag Boolean  @default(false) @map("delete_flag")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  // Establishes a 1-to-1 relationship with OAuthUser.
  oauthUser OAuthUser? @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("users")
}
